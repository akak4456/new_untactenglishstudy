package com.untact.attendance.persistent;

import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertNull;

import java.time.LocalDateTime;
import java.time.temporal.ChronoUnit;
import java.util.ArrayList;
import java.util.List;
import java.util.Random;

import javax.transaction.Transactional;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.dao.DataIntegrityViolationException;
import org.springframework.test.context.junit4.SpringRunner;

import com.untact.attendance.domain.Attendance;
import com.untact.attendance.domain.AttendanceStatus;
import com.untact.demo.UntactenglishstudyApplication;
import com.untact.group.domain.GroupEntity;
import com.untact.member.domain.MemberEntity;

import lombok.extern.java.Log;

@RunWith(SpringRunner.class)
@SpringBootTest(classes = UntactenglishstudyApplication.class)
@Transactional
@Log
public class AttendanceRepositoryTest {
	/*
	 * spring.jpa.hibernate.ddl-auto=create-drop
	 * 로 설정해서 테스트 할 것
	 */
	
	@Autowired
	private AttendanceRepository attendanceRepo;
	
	private List<GroupEntity> group;
	
	private List<MemberEntity> member;
	@Before
	public void setUp() {
		group = new ArrayList<>();
		member = new ArrayList<>();
		group.add(GroupEntity.builder().title("title1").build());
		group.add(GroupEntity.builder().title("title2").build());
		group.add(GroupEntity.builder().title("title3").build());
		member.add(MemberEntity.builder().email("email1@email.com").build());
		member.add(MemberEntity.builder().email("email2@email.com").build());
		member.add(MemberEntity.builder().email("email3@email.com").build());
	}
	
	@Test
	public void successSaveTest() {
		Attendance attendance = Attendance.builder()
									.status(AttendanceStatus.ABSENT)
									.group(group.get(0))
									.member(member.get(0))
									.build();
		attendanceRepo.saveAndFlush(attendance);
	}
	@Test(expected=DataIntegrityViolationException.class)
	public void statusNullSaveTest() {
		Attendance attendance = Attendance.builder()
				.group(group.get(0))
				.member(member.get(0))
				.build();
		attendanceRepo.saveAndFlush(attendance);
	}
	
	@Test(expected=DataIntegrityViolationException.class)
	public void groupNullSaveTest() {
		Attendance attendance = Attendance.builder()
									.status(AttendanceStatus.ABSENT)
									.member(member.get(0))
									.build();
		attendanceRepo.saveAndFlush(attendance);
	}
	
	@Test(expected=DataIntegrityViolationException.class)
	public void memberNullSaveTest() {
		Attendance attendance = Attendance.builder()
									.status(AttendanceStatus.ABSENT)
									.group(group.get(0))
									.build();
		attendanceRepo.saveAndFlush(attendance);
	}
	
	@Test
	public void findByGroupNumberAndMemberNumberAndBetweenLocalDateTimesTest() {
		for(int i=0;i<group.size();i++) {
			for(int j=0;j<member.size();j++) {
				attendanceRepo.save(Attendance.builder()
						.status(AttendanceStatus.ABSENT)
						.group(group.get(i))
						.member(member.get(j))
						.build());	
			}
		}
		log.info("GNO:"+group.get(0).getGno()+"");
		for(int i=0;i<group.size();i++) {
			for(int j=0;j<member.size();j++) {
				//정상적인 상황
				Random rand = new Random();
				assertNotNull(attendanceRepo.findByGroupNumberAndMemberNumberAndBetweenLocalDateTimes(
						group.get(i).getGno(), 
						member.get(j).getMno(), 
						LocalDateTime.now().minus(rand.nextInt(15)+1,ChronoUnit.MINUTES), 
						LocalDateTime.now().plus(rand.nextInt(15)+1,ChronoUnit.MINUTES)
				));	
			}
		}
		
			for(int j=0;j<member.size();j++) {
				//존재하지 않는 gno라면?
				Random rand = new Random();
				assertNull(attendanceRepo.findByGroupNumberAndMemberNumberAndBetweenLocalDateTimes(
						987654321L, 
						member.get(j).getMno(), 
						LocalDateTime.now().minus(rand.nextInt(15)+1,ChronoUnit.MINUTES), 
						LocalDateTime.now().plus(rand.nextInt(15)+1,ChronoUnit.MINUTES)
				));	
			}
	}
	
	@Test
	public void getPageWithGroupNumberAndMemberNumberTest() {
		
	}
	
	@Test
	public void findByGroupNumberAndLocalDateTest() {
		
	}
	
	@Test
	public void updateStatusByAttendanceNumberTest() {
		
	}
	
}
