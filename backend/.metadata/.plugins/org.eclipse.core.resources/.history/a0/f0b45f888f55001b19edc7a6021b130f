package com.untact.board.persistent;

import static org.junit.Assert.assertEquals;

import java.util.ArrayList;
import java.util.List;
import java.util.Random;

import javax.transaction.Transactional;

import org.junit.Before;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.dao.DataIntegrityViolationException;
import org.springframework.data.domain.Page;
import org.springframework.test.annotation.Commit;
import org.springframework.test.context.junit4.SpringRunner;

import com.untact.attendance.domain.Attendance;
import com.untact.attendance.domain.AttendanceStatus;
import com.untact.board.domain.Board;
import com.untact.board.domain.BoardKind;
import com.untact.demo.UntactenglishstudyApplication;
import com.untact.group.domain.GroupEntity;
import com.untact.member.domain.MemberEntity;
import com.untact.persistent.util.PageTester;
import com.untact.vo.PageDirection;
import com.untact.vo.PageVO;

import lombok.extern.java.Log;

@RunWith(SpringRunner.class)
@SpringBootTest(classes = UntactenglishstudyApplication.class)
@Transactional
@Log
public class BoardRepositoryTest {
	
	@Autowired
	private BoardRepository boardRepo;
	
	private List<GroupEntity> group;
	
	private List<MemberEntity> member;
	
	@Before
	public void setUp() {
		group = new ArrayList<>();
		member = new ArrayList<>();
		for (int i = 0; i < 5; i++) {
			group.add(GroupEntity.builder().title("title" + i).build());
			member.add(MemberEntity.builder().email("email" + i + "@email.com").build());
		}
	}
	
	@Test
	public void successSaveTest() {
		boardRepo.saveAndFlush(Board.builder()
									.title("title")
									.content("content")
									.group(group.get(0))
									.member(member.get(0))
									.kind(BoardKind.NORMAL)
									.build());
	}
	
	@Test(expected=DataIntegrityViolationException.class)
	public void titleNullSaveTest() {
		boardRepo.saveAndFlush(Board.builder()
				.content("content")
				.group(group.get(0))
				.member(member.get(0))
				.kind(BoardKind.NORMAL)
				.build());
	}
	
	@Test(expected=DataIntegrityViolationException.class)
	public void contentNullSaveTest() {
		boardRepo.saveAndFlush(Board.builder()
									.title("title")
									.group(group.get(0))
									.member(member.get(0))
									.kind(BoardKind.NORMAL)
									.build());
	}
	
	@Test(expected=DataIntegrityViolationException.class)
	public void groupNullSaveTest() {
		boardRepo.saveAndFlush(Board.builder()
									.title("title")
									.content("content")
									.member(member.get(0))
									.kind(BoardKind.NORMAL)
									.build());
	}
	
	@Test(expected=DataIntegrityViolationException.class)
	public void memberNullSaveTest() {
		boardRepo.saveAndFlush(Board.builder()
									.title("title")
									.content("content")
									.group(group.get(0))
									.kind(BoardKind.NORMAL)
									.build());
	}
	
	@Test(expected=DataIntegrityViolationException.class)
	public void kindNullSaveTest() {
		boardRepo.saveAndFlush(Board.builder()
									.title("title")
									.content("content")
									.group(group.get(0))
									.member(member.get(0))
									.build());
	}
	
	@Test
	public void getPageWithGroupNumberTest(){
		List<Board> testGroup = new ArrayList<>();
		List<Integer> testGroupSize = new ArrayList<>();
		for (int i = 0; i < group.size(); i++) {
			for (int j = 0; j < member.size(); j++) {
				Random random = new Random();
				int newSz = 10 + random.nextInt(20);
				testGroupSize.add(newSz);
				for (int k = 0; k < newSz; k++) {
					testGroup.add(Board.builder()
							.title("title")
							.content("content")
							.group(group.get(i))
							.member(member.get(j))
							.kind(BoardKind.NORMAL)
							.build());
				}
			}
		}
		attendanceRepo.saveAll(testGroup);
		// test Group 생성

		PageVO pageVO = new PageVO();
		PageTester<Attendance> tester = new PageTester<>();

		for (int i = 0; i < group.size(); i++) {
			for (int j = 0; j < member.size(); j++) {
				int sz = testGroupSize.get(i * member.size() + j);
				for (int pageNum = 1; pageNum <= sz / pageVO.getSize(); pageNum++) {
					pageVO.setPage(pageNum);
					Page<Attendance> page = attendanceRepo.getPageWithGroupNumberAndMemberNumber(
							pageVO.makePageable(PageDirection.DESC, "ano"), group.get(i).getGno(),
							member.get(j).getMno());
					tester.pageTest(page, testGroup, pageNum, sz, PageDirection.DESC);
				}
				int notExistPage = sz / pageVO.getSize() + 5;
				pageVO.setPage(notExistPage);
				Page<Attendance> page = attendanceRepo.getPageWithGroupNumberAndMemberNumber(
						pageVO.makePageable(PageDirection.DESC, "ano"), group.get(i).getGno(), member.get(j).getMno());
				assertEquals(page.getNumberOfElements(),0);
			}

		}
	}
	
	@Test
	public void getPageWithGroupNumberAndKindTest() {
		
	}
	/*
	@Test
	public void getPageWithGroupNumberTest() {
		List<Board> list = generateBoardList(group1,member1);
		specificPageTest(list,group1,1,10);
		specificPageTest(list,group1,11,5);
	}
	
	private List<Board> generateBoardList(GroupEntity group,MemberEntity member){
		List<Board> list = new ArrayList<>();
		for(int i=0;i<MAX_ENTITY_COUNT;i++) {
			Board entity = generateBoard("title"+i,"content"+i,group,member);
			list.add(entity);
		}
		boardRepo.saveAll(list);
		return list;
	}
	private Board generateBoard(String title,String content,GroupEntity group,MemberEntity member) {
		return new Board().builder().title(title).content(content).group(group).member(member).build();
	}
	
	private void specificPageTest(List<Board> list,GroupEntity group,int pageNum,int expectedPageSize) {
		PageVO pageVO = new PageVO(pageNum);
		Page<Board> page = boardRepo.getPageWithGroupNumber(pageVO.makePageable(0, "bno"),group.getGno());
		List<Board> result = page.getContent();
		assertEquals(page.getTotalElements(),MAX_ENTITY_COUNT);
		assertEquals(page.getTotalPages(),EXPECTED_PAGE_COUNT);
		assertEquals(result.size(),expectedPageSize);
		assertEquals(page.getNumber(),pageNum-1);
		int resultIdx = 0;
		for(int i = list.size()-1-pageVO.getSize()*(pageNum-1);i>Math.max(-1,list.size()-1-pageVO.getSize()*pageNum);i--) {
			//list의 첫번째 원소는 가장 처음에, list의 마지막 원소는 가장 나중에 들어옴
			//내림차순으로 정렬되었는지 확인하기 위함
			assertTrue(result.get(resultIdx).getTitle().equals(list.get(i).getTitle()));
			log.info(result.get(resultIdx).getTitle());
			log.info(result.get(resultIdx).getMember().getName());
			resultIdx++;
		}
	}
	*/
}
